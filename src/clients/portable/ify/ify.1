.TH ify 1L "July 25, 1989"
.SH NAME
ify \- Iconify MGR windows
.SH SYNOPSIS
.B ify
[ \fB\-s\fP ]
.SH DESCRIPTION
\fBIfy\fP lets the user iconify \fBMGR\fP windows.  When run,
\fBify\fP shrinks its window and displays its icon.  If started with
the \fB\-s\fP option, \fBify\fP does not reshape its window to fit the
icon.
.PP
While \fBify\fP's window is active, the user can iconify or de-iconify
windows by clicking on them with the right mouse button.  To iconify a
window, \fBify\fP shrinks it and buries it in an unoccupied portion of the
screen.  To de-iconify a window, \fBify\fP restores the window's size,
position, contents and settings.  Iconified windows cannot handle
input or output; programs doing output to iconified windows will
block.  If an application has opened several subwindows on the screen,
the user may click on any of the windows to iconify the whole group;
clicking on any of the iconified windows de-iconfies the whole group.
.PP
The middle mouse button displays a pop-up menu listing the currently
closed windows; selecting a window from the menu opens it.  The menu
also contains a \fIquit\fP item, which exits \fBify\fP, and a
\fIremake menu\fP item, which causes \fBify\fP to re-examine the
display for closed windows and update its list.
.PP
\fBIfy\fP titles an iconified window with its \fBNOTIFY\fP string,
possibly followed by its window id in parenthesis, if it is a
subwindow.  The \fBNOTIFY\fP string can be set from within C programs
using a statement of the form
.RS
m_setevent(NOTIFY, "\fItitle\fP");
.RE
or from the shell using the \fBsetname\fP program, possibly as part of
the .mgrc file.  If a window has no \fBNOTIFY\fP event set, \fBify\fP
titles it with the name of its tty.
.PP
To find its icon, \fBify\fP searches \fBMGR\fP's current directory
(usually the user's home directory) for a file called \fB.ify.icon\fP,
and then searches the standard \fBMGR\fP icon directory for a file
called \fBify.icon\fP.  If neither of those files exists, it despairs
and downloads its own icon.
.PP
If there are no free spots on the screen, \fBify\fP starts stacking windows
going down the left side of the screen.
.SH NOTES
\fBIfy\fP runs more smoothly when \fBMGR\fP has its setuid bit turned
on.  If \fBMGR\fP is not running with the setuid bit on, the
pseudo-ttys for the windows end up being owned by root, not by the
user.  In this situation, since \fBify\fP can't turn off general write
permission to its tty, its internal operations become a little less
robust; it may start behaving strangely when the system becomes
heavily loaded, or if an application has opened many windows.
.SH SEE ALSO
mgr(1L), close(1), setname(1L)
.SH DIAGNOSTICS
If \fBify\fP encounters an unexpected error from a system call, it prints the
error message and exits.  These messages are usually not very helpful to
the end user, and probably indicate bugs in \fBify\fP itself.
.SH BUGS
If a program has several windows open, de-iconifying the group may leave
the wrong window selected.
.PP
Some programs push their event strings without establishing a new
\fBNOTIFY\fP string, so iconification leaves them untitled.
.PP
\fBIfy\fP stores information in a window's \fBNOTIFY\fP string while
the window is iconified; if this information is corrupted, \fBify\fP
might not be able to reopen the window.  To get around this, select
the iconified window and press control-Q.
.SH AUTHOR
Jim Blandy
